/* code by nick */
package com.sadsunshower.friend;

// for loading application settings
import java.io.File;
import java.util.Properties;

// main class
public class Friend {
    public static boolean lwinpressed = false;
    public static boolean rwinpressed = false;
    
    // main method
    public static void main(String[] args) {
        // check for command line argument for running on linux
        boolean linux = false;
        if (args.length != 0) {
            linux = args[0].equalsIgnoreCase("-linux");
        }
        
        // application settings
        Properties props = new Properties();
        
        // default behaviour is 0
        props.setProperty("behaviour", "0");
        
        try {
            File pf = new File("friend.properties");
            // if the properties file does not exist, create it
            System.out.println(pf.getAbsolutePath());
            if (!pf.exists()) {
                System.out.println("Creating new properties file");
                if (pf.getParentFile() != null) {
                    pf.getParentFile().mkdirs();
                }
                pf.createNewFile();
                props.store(new java.io.FileOutputStream(pf), "Properties file generated by friend. See README for details");
            // otherwise, load it
            } else {
                props.load(new java.io.FileInputStream(pf));
            }
        } catch (Exception e) {
            System.out.println("Error loading properties: " + e.toString());
        }
        
        // check for any arguments changing properties
        for (int i = 0; i < args.length; i++) {
            // if we have a property flag in an argument
            if (args[i].startsWith("-p")) {
                try {
                    // set the property to the next argument
                    // e.g. arguments -pbehaviour 2 would set behaviour = 2
                    props.setProperty(args[i].substring(2), args[i + 1]);
                } catch (ArrayIndexOutOfBoundsException e) {
                    // ignore it if it's the last argument
                }
            }
        }
        
        FriendChar friend = new FriendChar(linux, props);
        
        // create the tray icon
        TrayManager.initialise(friend);
        
        // for behaviour 2, we need to track cursor movements three times as fast.
        int animTimer = 0;
        
        // start the main loop
        while(true) {
            if (props.getProperty("behaviour").equals("2")) {
                // for behaviour 2, start the sync process with reduced timing
                Synchroniser.startSync(22);
            } else {
                // start the sync process normally
                Synchroniser.startSync(66);
            }
            
            // use awt to find the cursor location
            java.awt.Point pos = java.awt.MouseInfo.getPointerInfo().getLocation();
            friend.moveTo(pos.x, pos.y);
            
            if (props.getProperty("behaviour").equals("2")) {
                // for behaviour 2, loop animations / movement every third cycle.
                if (animTimer == 0) {
                    animTimer = 3;
                    friend.loop();
                } else {
                    animTimer--;
                }
            } else {
                // loop animations / movement
                friend.loop();
            }
            
            Synchroniser.doSync();
        }
    }
}
